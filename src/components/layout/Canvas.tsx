import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Send } from 'lucide-react';
import { CanvasHeader } from './CanvasHeader';
import { UserJourneyMap } from '../stage/elements/UserJourneyMap';
import { AppFlowchart } from '../stage/elements/AppFlowchart';
import { SpatialCanvas } from '../canvas/SpatialCanvas';
import { Stage } from '../../types';

interface CanvasProps {
  currentStage?: Stage;
  stageData: any;
  onSendMessage: (message: string) => void;
}

export const Canvas: React.FC<CanvasProps> = ({ 
  currentStage, 
  stageData,
  onSendMessage
}) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (message.trim()) {
      onSendMessage(message.trim());
      setMessage('');
    }
  };

  const renderCanvasContent = () => {
    if (!currentStage) {
      return (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-lg p-8 shadow-sm border border-gray-200 min-h-96"
        >
          <div className="text-center text-gray-500">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">üé®</span>
            </div>
            <h3 className="text-lg font-semibold text-gray-700 mb-2">AI Canvas</h3>
            <p className="text-gray-600">
              This is where the AI agent will dynamically place design elements, wireframes, and documentation as you work through each stage.
            </p>
          </div>
        </motion.div>
      );
    }

    // Render stage-specific content based on completion and data
    if (currentStage.id === 'structure-flow' && currentStage.completed) {
      const uxData = stageData['structure-flow'] || {};
      
      // Sample journey steps - in real implementation, this would be generated by AI
      const sampleJourneySteps = [
        {
          id: '1',
          title: 'Discovery',
          description: 'User discovers the app and decides to try it',
          touchpoints: ['App Store', 'Social Media', 'Word of Mouth'],
          emotions: 'positive' as const,
        },
        {
          id: '2',
          title: 'Onboarding',
          description: 'User signs up and completes initial setup',
          touchpoints: ['Landing Page', 'Sign-up Form', 'Welcome Tutorial'],
          emotions: 'neutral' as const,
          painPoints: ['Complex form', 'Too many steps'],
        },
        {
          id: '3',
          title: 'First Use',
          description: 'User explores core features and completes first task',
          touchpoints: ['Main Dashboard', 'Feature Tour', 'Help Center'],
          emotions: 'positive' as const,
        },
      ];

      // Sample flowchart nodes
      const sampleNodes = [
        { id: 'start', title: 'App Launch', type: 'screen' as const, position: { x: 50, y: 50 } },
        { id: 'auth', title: 'Authentication', type: 'decision' as const, position: { x: 250, y: 50 } },
        { id: 'home', title: 'Home Screen', type: 'screen' as const, position: { x: 450, y: 50 } },
        { id: 'profile', title: 'User Profile', type: 'screen' as const, position: { x: 250, y: 150 } },
      ];

      const sampleConnections = [
        { from: 'start', to: 'auth' },
        { from: 'auth', to: 'home', label: 'Success' },
        { from: 'home', to: 'profile' },
      ];
    }
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-lg p-8 shadow-sm border border-gray-200 min-h-96"
      >
        <div className="text-center text-gray-500">
          <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl">{currentStage.completed ? '‚úÖ' : '‚è≥'}</span>
          </div>
          <h3 className="text-lg font-semibold text-gray-700 mb-2">
            {currentStage.completed ? 'Stage Completed' : 'Working on it...'}
          </h3>
          <p className="text-gray-600">
            {currentStage.completed 
              ? 'Great! Your content has been generated. Check the sidebar for options or move to the next stage.'
              : 'Complete the stage configuration in the sidebar to generate AI content here.'
            }
          </p>
        </div>
      </motion.div>
    );
  };

  return (
    <div className="flex-1 flex flex-col bg-gray-50">
      <CanvasHeader currentStage={currentStage} />
      
      {/* Main Canvas Area */}
      <div className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          {/* Spatial Canvas - Always Available */}
          <div className="mb-6">
            <SpatialCanvas
              currentStage={currentStage}
              stageData={stageData}
              onSendMessage={onSendMessage}
            />
          </div>
        </div>
      </div>

      {/* Input Area */}
      <div className="p-6 bg-white border-t border-gray-200">
        <div className="max-w-4xl mx-auto">
          <form onSubmit={handleSubmit} className="flex gap-4">
            <div className="flex-1 relative">
              <input
                type="text"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={
                  currentStage?.comingSoon 
                    ? "This stage is coming soon..." 
                    : "Describe your app idea or ask a question..."
                }
                disabled={currentStage?.comingSoon}
                className={`
                  w-full p-4 pr-12 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
                  ${currentStage?.comingSoon ? 'bg-gray-50 text-gray-400 cursor-not-allowed' : 'bg-white'}
                `}
              />
              <button
                type="submit"
                disabled={!message.trim() || currentStage?.comingSoon}
                className={`
                  absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-lg transition-colors
                  ${message.trim() && !currentStage?.comingSoon
                    ? 'bg-blue-600 text-white hover:bg-blue-700' 
                    : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  }
                `}
              >
                <Send size={20} />
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};